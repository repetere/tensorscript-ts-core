[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "lib/core.mjs",
    "content": "import tf from '@tensorflow/tfjs';\r\n\r\n/**\r\n * Base class for tensorscript models\r\n * @interface TensorScriptModelInterface\r\n * @property {Object} settings - tensorflow model hyperparameters\r\n * @property {Object} model - tensorflow model\r\n * @property {Object} tf - tensorflow / tensorflow-node / tensorflow-node-gpu\r\n * @property {Function} reshape - static reshape array function\r\n * @property {Function} getInputShape - static TensorScriptModelInterface\r\n */\r\nexport class TensorScriptModelInterface {\r\n  /**\r\n   * @param {Object} options - tensorflow model hyperparameters\r\n   * @param {Object} customTF - custom, overridale tensorflow / tensorflow-node / tensorflow-node-gpu\r\n   * @param {{model:Object,tf:Object,}} properties - extra instance properties\r\n   */\r\n  constructor(options = {}, properties = {}) {\r\n    this.settings = options;\r\n    this.model = properties.model; //tf\r\n    this.tf = properties.tf || tf;\r\n    this.reshape = TensorScriptModelInterface.reshape;\r\n    this.getInputShape = TensorScriptModelInterface.getInputShape;\r\n    return this;\r\n  }\r\n  /**\r\n   * Reshapes an array\r\n   * @function\r\n   * @example \r\n   * const array = [ 0, 1, 1, 0, ];\r\n   * const shape = [2,2];\r\n   * TensorScriptModelInterface.reshape(array,shape) // => \r\n   * [\r\n   *   [ 0, 1, ],\r\n   *   [ 1, 0, ],\r\n   * ];\r\n   * @param {Array<number>} array - input array \r\n   * @param {Array<number>} shape - shape array \r\n   * @return {Array<Array<number>>} returns a matrix with the defined shape\r\n   */\r\n  static reshape(array, shape) {\r\n    const rows = shape[ 0 ];\r\n    const cols = shape[ 1 ];\r\n    const shapedArray = array.reduce((result, val, i) => { \r\n      const index = Math.floor(i / cols);\r\n      if (Array.isArray(result[ index ])) {\r\n        result[ index ].push(val);\r\n      } else {\r\n        result[ index ] = [val,];\r\n      }\r\n      return result;\r\n    }, []);\r\n    if (shapedArray.length !== rows) throw new SyntaxError(`specified shape (${shape}) is compatible with input array or length (${array.length})`);\r\n    return shapedArray;\r\n  }\r\n  /**\r\n   * Returns the shape of an input matrix\r\n   * @function\r\n   * @example \r\n   * const input = [\r\n   *   [ 0, 1, ],\r\n   *   [ 1, 0, ],\r\n   * ];\r\n   * TensorScriptModelInterface.getInputShape(input) // => [2,2]\r\n   * @param {Array<Array<number>>} matrix - input matrix \r\n   * @return {Array<number>} returns the shape of a matrix (e.g. [2,2])\r\n   */\r\n  static getInputShape(matrix=[]) {\r\n    if (Array.isArray(matrix) === false || !matrix[ 0 ] || !matrix[ 0 ].length || Array.isArray(matrix[ 0 ]) === false) throw new TypeError('input must be a matrix');\r\n    const x_dimensions = matrix[ 0 ].length;\r\n    matrix.forEach(vector => {\r\n      if (vector.length !== x_dimensions) throw new SyntaxError('input must have the same length in each row');\r\n    });\r\n    return [\r\n      matrix.length, x_dimensions,\r\n    ];\r\n  }\r\n  /**\r\n   * Asynchronously trains tensorflow model, must be implemented by tensorscript class\r\n   * @abstract \r\n   * @param {Array<Array<number>>} x_matrix - independent variables\r\n   * @param {Array<Array<number>>} y_matrix - dependent variables\r\n   * @return {Object} returns trained tensorflow model \r\n   */\r\n  train(x_matrix, y_matrix) {\r\n    throw new ReferenceError('train method is not implemented');\r\n  }\r\n  /**\r\n   * Predicts new dependent variables\r\n   * @abstract \r\n   * @param {Array<Array<number>>|Array<number>} matrix - new test independent variables\r\n   * @return {{data: Promise}} returns tensorflow prediction \r\n   */\r\n  calculate(matrix) {\r\n    throw new ReferenceError('calculate method is not implemented');\r\n  }\r\n  /**\r\n   * Loads a saved tensoflow / keras model\r\n   * @param {Object} options - tensorflow load model options\r\n   * @return {Object} tensorflow model\r\n   */\r\n  async loadModel(options) {\r\n    this.model = await this.tf.loadModel(options);\r\n    return this.model;\r\n  }\r\n  /**\r\n   * Returns prediction values from tensorflow model\r\n   * @param {Array<Array<number>>|Array<number>} x_matrix - new test independent variables \r\n   * @param {Boolean} [options.json=true] - return object instead of typed array\r\n   * @param {Boolean} [options.json=true] - return real values instead of integers\r\n   * @return {Array<number>|Array<Array<number>>} predicted model values\r\n   */\r\n  async predict(x_matrix, options = {}) {\r\n    const config = Object.assign({\r\n      json: true,\r\n      probability: true,\r\n    }, options);\r\n    if (!x_matrix || Array.isArray(x_matrix)===false) throw new Error('invalid input matrix');\r\n    return this.calculate(x_matrix)\r\n      .data()\r\n      .then(predictions => {\r\n        if (config.json === false) {\r\n          return predictions;\r\n        } else {\r\n          const shape = [x_matrix.length, this.yShape[ 1 ],];\r\n          const predictionValues = (options.probability === false) ? Array.from(predictions).map(Math.round) : Array.from(predictions);\r\n          return this.reshape(predictionValues, shape);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        throw e; \r\n      });\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-core/lib/core.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "TensorScriptModelInterface",
    "memberof": "lib/core.mjs",
    "static": true,
    "longname": "lib/core.mjs~TensorScriptModelInterface",
    "access": "public",
    "export": true,
    "importPath": "@tensorscript/core/lib/core.mjs",
    "importStyle": "{TensorScriptModelInterface}",
    "description": "Base class for tensorscript models",
    "lineNumber": 12,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "settings",
        "description": "tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "tensorflow model"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tf",
        "description": "tensorflow / tensorflow-node / tensorflow-node-gpu"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "reshape",
        "description": "static reshape array function"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getInputShape",
        "description": "static TensorScriptModelInterface"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "tensorflow model hyperparameters"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "customTF",
        "description": "custom, overridale tensorflow / tensorflow-node / tensorflow-node-gpu"
      },
      {
        "nullable": null,
        "types": [
          "{model:Object,tf:Object,}"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "extra instance properties"
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "settings",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#settings",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "model",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#model",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "tf",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#tf",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "reshape",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#reshape",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "getInputShape",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#getInputShape",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "reshape",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/core.mjs~TensorScriptModelInterface.reshape",
    "access": "public",
    "description": "Reshapes an array",
    "examples": [
      "const array = [ 0, 1, 1, 0, ];\nconst shape = [2,2];\nTensorScriptModelInterface.reshape(array,shape) // => \n[\n  [ 0, 1, ],\n  [ 1, 0, ],\n];"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": "input array"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "shape",
        "description": "shape array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "returns a matrix with the defined shape"
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "getInputShape",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/core.mjs~TensorScriptModelInterface.getInputShape",
    "access": "public",
    "description": "Returns the shape of an input matrix",
    "examples": [
      "const input = [\n  [ 0, 1, ],\n  [ 1, 0, ],\n];\nTensorScriptModelInterface.getInputShape(input) // => [2,2]"
    ],
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "input matrix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "returns the shape of a matrix (e.g. [2,2])"
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "train",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#train",
    "access": "public",
    "description": "Asynchronously trains tensorflow model, must be implemented by tensorscript class",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "y_matrix",
        "description": "dependent variables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns trained tensorflow model"
    },
    "abstract": true
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "calculate",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#calculate",
    "access": "public",
    "description": "Predicts new dependent variables",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>|Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "new test independent variables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{data: Promise}"
      ],
      "spread": false,
      "description": "returns tensorflow prediction"
    },
    "abstract": true
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "loadModel",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#loadModel",
    "access": "public",
    "description": "Loads a saved tensoflow / keras model",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "tensorflow load model options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "tensorflow model"
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "predict",
    "memberof": "lib/core.mjs~TensorScriptModelInterface",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "lib/core.mjs~TensorScriptModelInterface#predict",
    "access": "public",
    "description": "Returns prediction values from tensorflow model",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>|Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "x_matrix",
        "description": "new test independent variables"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.json",
        "description": "return object instead of typed array"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.json",
        "description": "return real values instead of integers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>|Array<Array<number>>"
      ],
      "spread": false,
      "description": "predicted model values"
    }
  },
  {
    "kind": "index",
    "content": "# @tensorscript/ts-core\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/ts-core/badge.svg?branch=master)](https://coveralls.io/github/repetere/ts-core?branch=master) [![Build Status](https://travis-ci.org/repetere/ts-core.svg?branch=master)](https://travis-ci.org/repetere/ts-core)\n\nMachine Learning tools built with Tensorflow\n### [Full Documentation](https://github.com/repetere/@tensorscript/ts-core/blob/master/docs/API.md)\n\n### Installation\n\n```sh\n$ npm i @tensorscript/ts-core\n```\n\n\n### Testing\n\n```sh\n$ npm i\n$ npm test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Misc\n\nAs of Node 8, ES modules are still used behind a flag, when running natively as an ES module\n\n```sh\n$ node --experimental-modules my-machine-learning-script.mjs\n# Also there are native bindings that require Python 2.x, make sure if you're using Andaconda, you build with your Python 2.x bin\n$ npm i --python=/usr/bin/python\n ```\n\nLicense\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/ts-core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]